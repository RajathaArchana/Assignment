#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <sstream>

using namespace std;


class Assignment {
private:
string details;
unordered_set<string> submittedBy;

public:
Assignment(const string& details) : details(details) {}

void submit(const string& studentId) {
submittedBy.insert(studentId);
}

string getDetails() const {
return details;
}

const unordered_set<string>& getSubmittedBy() const {
return submittedBy;
}
};


class Student {
private:
string id;

public:
Student(const string& id) : id(id) {}

string getId() const {
return id;
}
};


class Classroom {
private:
string name;
vector<Student> students;
vector<Assignment> assignments;

public:
Classroom(const string& name) : name(name) {}

void addStudent(const string& studentId) {
students.emplace_back(studentId);
cout << "Student " << studentId << " has been enrolled in " << name << ".\n";
}

void scheduleAssignment(const string& details) {
assignments.emplace_back(details);
cout << "Assignment for " << name << " has been scheduled.\n";
}

void submitAssignment(const string& studentId, const string& assignmentDetails) {
for (auto& assignment : assignments) {
if (assignment.getDetails() == assignmentDetails) {
assignment.submit(studentId);
cout << "Assignment submitted by Student " << studentId << " in " << name << ".\n";
return;
}
}
cout << "Assignment not found in " << name << ".\n";
}

void listStudents() const {
cout << "Students in " << name << ": ";
for (const auto& student : students) {
cout << student.getId() << " ";
}
cout << "\n";
}

const string& getName() const {
return name;
}
};


class VirtualClassroomManager {
private:
unordered_map<string, Classroom> classrooms;

public:
void addClassroom(const string& className) {
classrooms.emplace(className, Classroom(className));
cout << "Classroom " << className << " has been created.\n";
}

void addStudent(const string& studentId, const string& className) {
if (classrooms.find(className) != classrooms.end()) {
classrooms[className].addStudent(studentId);
} else {
cout << "Classroom " << className << " not found.\n";
}
}

void scheduleAssignment(const string& className, const string& details) {
if (classrooms.find(className) != classrooms.end()) {
classrooms[className].scheduleAssignment(details);
} else {
cout << "Classroom " << className << " not found.\n";
}
}

void submitAssignment(const string& studentId, const string& className, const string& details) {
if (classrooms.find(className) != classrooms.end()) {
classrooms[className].submitAssignment(studentId, details);
} else {
cout << "Classroom " << className << " not found.\n";
}
}

void listStudents(const string& className) {
if (classrooms.find(className) != classrooms.end()) {
classrooms[className].listStudents();
} else {
cout << "Classroom " << className << " not found.\n";
}
}
};


int main() {
VirtualClassroomManager manager;
string command;

cout << "Welcome to the Virtual Classroom Manager!\n";

while (true) {
cout << "> ";
getline(cin, command);

if (command == "exit") break;

stringstream ss(command);
string action;
ss >> action;

if (action == "add_classroom") {
string className;
ss >> className;
manager.addClassroom(className);
} else if (action == "add_student") {
string studentId, className;
ss >> studentId >> className;
manager.addStudent(studentId, className);
} else if (action == "schedule_assignment") {
string className, details;
ss >> className;
getline(ss, details);
manager.scheduleAssignment(className, details.substr(1));
} else if (action == "submit_assignment") {
string studentId, className, details;
ss >> studentId >> className;
getline(ss, details);
manager.submitAssignment(studentId, className, details.substr(1));
} else if (action == "list_students") {
string className;
ss >> className;
manager.listStudents(className);
} else {
cout << "Unknown command.\n";
}
}

cout << "Exiting Virtual Classroom Manager.\n";
return 0;
}
